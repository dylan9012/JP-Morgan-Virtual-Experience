Index: client3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client3.py	(date 1600464883628)
+++ client3.py	(date 1600464883628)
@@ -18,10 +18,10 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
-import urllib.request
-import time
 import json
 import random
+import urllib.request
+import time
 
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
@@ -29,31 +29,39 @@
 # 500 server request
 N = 500
 
+
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+    """ Produce all of the needed values to generate a datapoint """
+    """ ------------- Update this function ------------- """
+    stock = quote['stock']
+    bid_price = float(quote['top_bid']['price'])
+    ask_price = float(quote['top_ask']['price'])
+    price = (bid_price + ask_price) / 2
+    return stock, bid_price, ask_price, price
 
+
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+    """ Get ratio of price_a and price_b """
+    """ ------------- Update this function ------------- """
+    """ Also create some unit tests for this function in client_test.py """
+    if price_b == 0:
+        return
+
+    return price_a / price_b
+
 
 # Main
 if __name__ == "__main__":
 
-	# Query the price once every N seconds.
-	for _ in iter(range(N)):
-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+    # Query the price once every N seconds.
+    for _ in iter(range(N)):
+        quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+        """ ----------- Update to get the ratio --------------- """
+        prices = {}
+        for quote in quotes:
+            stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
+            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
Index: server3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server3.py	(date 1600464883628)
+++ server3.py	(date 1600464883628)
@@ -18,43 +18,42 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
-#from itertools import izip
-from random    import normalvariate, random
-from datetime  import timedelta, datetime
-
 import csv
-import dateutil.parser
-import os.path
-
-import operator
+# from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
+import http.server
 import json
+import operator
+import os.path
 import re
 import threading
-
-#from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
-import http.server
-from socketserver   import ThreadingMixIn
+from datetime import timedelta, datetime
+# from itertools import izip
+from random import normalvariate, random
+from socketserver import ThreadingMixIn
 
+import dateutil.parser
+
 ################################################################################
 #
 # Config
 
 # Sim params
 
-REALTIME    = True
-SIM_LENGTH  = timedelta(days = 365 * 5)
-MARKET_OPEN = datetime.today().replace(hour = 0, minute = 30, second = 0)
+REALTIME = True
+SIM_LENGTH = timedelta(days=365 * 5)
+MARKET_OPEN = datetime.today().replace(hour=0, minute=30, second=0)
 
 # Market parms
 #       min  / max  / std
-SPD  = (2.0,   6.0,   0.1)
-PX   = (60.0,  150.0, 1)
-FREQ = (12,    36,   50)
+SPD = (2.0, 6.0, 0.1)
+PX = (60.0, 150.0, 1)
+FREQ = (12, 36, 50)
 
 # Trades
 
 OVERLAP = 4
 
+
 ################################################################################
 #
 # Test Data
@@ -66,23 +65,25 @@
         max += normalvariate(0, std)
         yield abs((max % (rng * 2)) - rng) + min
 
-def market(t0 = MARKET_OPEN):
+
+def market(t0=MARKET_OPEN):
     """ Generates a random series of market conditions,
         (time, price, spread).
     """
     for hours, px, spd in zip(bwalk(*FREQ), bwalk(*PX), bwalk(*SPD)):
         yield t0, px, spd
-        t0 += timedelta(hours = abs(hours))
+        t0 += timedelta(hours=abs(hours))
 
+
 def orders(hist):
     """ Generates a random set of limit orders (time, side, price, size) from
         a series of market conditions.
     """
     for t, px, spd in hist:
         stock = 'ABC' if random() > 0.5 else 'DEF'
-        side, d  = ('sell', 2) if random() > 0.5 else ('buy', -2)
+        side, d = ('sell', 2) if random() > 0.5 else ('buy', -2)
         order = round(normalvariate(px + (spd / d), spd / OVERLAP), 2)
-        size  = int(abs(normalvariate(0, 100)))
+        size = int(abs(normalvariate(0, 100)))
         yield t, stock, side, order, size
 
 
@@ -90,14 +91,15 @@
 #
 # Order Book
 
-def add_book(book, order, size, _age = 10):
+def add_book(book, order, size, _age=10):
     """ Add a new order and size to a book, and age the rest of the book. """
     yield order, size, _age
     for o, s, age in book:
         if age > 0:
             yield o, s, age - 1
 
-def clear_order(order, size, book, op = operator.ge, _notional = 0):
+
+def clear_order(order, size, book, op=operator.ge, _notional=0):
     """ Try to clear a sized order against a book, returning a tuple of
         (notional, new_book) if successful, and None if not.  _notional is a
         recursive accumulator and should not be provided by the caller.
@@ -111,7 +113,8 @@
         elif len(tail) > 0:
             return clear_order(order, -sdiff, tail, op, _notional)
 
-def clear_book(buy = None, sell = None):
+
+def clear_book(buy=None, sell=None):
     """ Clears all crossed orders from a buy and sell book, returning the new
         books uncrossed.
     """
@@ -120,11 +123,12 @@
         new_book = clear_order(order, size, sell)
         if new_book:
             sell = new_book[1]
-            buy  = buy[1:]
+            buy = buy[1:]
         else:
             break
     return buy, sell
 
+
 def order_book(orders, book, stock_name):
     """ Generates a series of order books from a series of orders.  Order books
         are mutable lists, and mutating them during generation will affect the
@@ -133,10 +137,11 @@
     for t, stock, side, order, size in orders:
         if stock_name == stock:
             new = add_book(book.get(side, []), order, size)
-            book[side] = sorted(new, reverse = side == 'buy', key = lambda x: x[0])
+            book[side] = sorted(new, reverse=side == 'buy', key=lambda x: x[0])
         bids, asks = clear_book(**book)
         yield t, bids, asks
 
+
 ################################################################################
 #
 # Test Data Persistence
@@ -150,12 +155,14 @@
                 break
             writer.writerow([t, stock, side, order, size])
 
+
 def read_csv():
     """ Read a CSV or order history into a list. """
     with open('test.csv', 'rt') as f:
         for time, stock, side, order, size in csv.reader(f):
             yield dateutil.parser.parse(time), stock, side, float(order), int(size)
 
+
 ################################################################################
 #
 # Server
@@ -165,20 +172,25 @@
         shutdown.
     """
     allow_reuse_address = True
+
     def shutdown(self):
         """ Override MRO to shutdown properly. """
         self.socket.close()
         http.server.HTTPServer.shutdown(self)
 
+
 def route(path):
     """ Decorator for a simple bottle-like web framework.  Routes path to the
         decorated method, with the rest of the path as an argument.
     """
+
     def _route(f):
         setattr(f, '__route__', path)
         return f
+
     return _route
 
+
 def read_params(path):
     """ Read query parameters into a dictionary if they are parseable,
         otherwise returns None.
@@ -188,6 +200,7 @@
         query = query[1].split('&')
         return dict(map(lambda x: x.split('='), query))
 
+
 def get(req_handler, routes):
     """ Map a request to the appropriate route of a routes instance. """
     for name, handler in routes.__class__.__dict__.items():
@@ -199,23 +212,27 @@
                 req_handler.end_headers()
                 params = read_params(req_handler.path)
                 data = json.dumps(handler(routes, params)) + '\n'
-                req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
+                req_handler.wfile.write(bytes(data, encoding='utf-8'))
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+
+def run(routes, host='0.0.0.0', port=8080):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
+
     class RequestHandler(http.server.BaseHTTPRequestHandler):
         def log_message(self, *args, **kwargs):
             pass
+
         def do_GET(self):
             get(self, routes)
+
     server = ThreadedHTTPServer((host, port), RequestHandler)
-    thread = threading.Thread(target = server.serve_forever)
+    thread = threading.Thread(target=server.serve_forever)
     thread.daemon = True
     thread.start()
-    print ('HTTP server started on port 8080')
+    print('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
@@ -223,25 +240,27 @@
     server.start()
     server.waitForThread()
 
+
 ################################################################################
 #
 # App
 
 ops = {
-    'buy':  operator.le,
+    'buy': operator.le,
     'sell': operator.ge,
 }
 
+
 class App(object):
     """ The trading game server application. """
 
     def __init__(self):
-        self._book_1    = dict()
-        self._book_2    = dict()
-        self._data_1    = order_book(read_csv(), self._book_1, 'ABC')
-        self._data_2    = order_book(read_csv(), self._book_2, 'DEF')
+        self._book_1 = dict()
+        self._book_2 = dict()
+        self._data_1 = order_book(read_csv(), self._book_1, 'ABC')
+        self._data_2 = order_book(read_csv(), self._book_2, 'DEF')
         self._rt_start = datetime.now()
-        self._sim_start, _, _  = next(self._data_1)
+        self._sim_start, _, _ = next(self._data_1)
         self.read_10_first_lines()
 
     @property
@@ -263,9 +282,9 @@
                 yield t, bids, asks
 
     def read_10_first_lines(self):
-            for _ in iter(range(10)):
-                next(self._data_1)
-                next(self._data_2)
+        for _ in iter(range(10)):
+            next(self._data_1)
+            next(self._data_2)
 
     @route('/query')
     def handle_query(self, x):
@@ -276,12 +295,12 @@
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         except Exception as e:
-            print ("error getting stocks...reinitalizing app")
+            print("error getting stocks...reinitalizing app")
             self.__init__()
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         t = t1 if t1 > t2 else t2
-        print ('Query received @ t%s' % t)
+        print('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -295,26 +314,27 @@
                 'size': asks1[0][1]
             }
         },
-        {
-            'id': x and x.get('id', None),
-            'stock': 'DEF',
-            'timestamp': str(t),
-            'top_bid': bids2 and {
-                'price': bids2[0][0],
-                'size': bids2[0][1]
-            },
-            'top_ask': asks2 and {
-                'price': asks2[0][0],
-                'size': asks2[0][1]
-            }
-        }]
+            {
+                'id': x and x.get('id', None),
+                'stock': 'DEF',
+                'timestamp': str(t),
+                'top_bid': bids2 and {
+                    'price': bids2[0][0],
+                    'size': bids2[0][1]
+                },
+                'top_ask': asks2 and {
+                    'price': asks2[0][0],
+                    'size': asks2[0][1]
+                }
+            }]
 
+
 ################################################################################
 #
 # Main
 
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print ("No data found, generating...")
+        print("No data found, generating...")
         generate_csv()
     run(App())
Index: client_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client_test.py	(date 1600464883628)
+++ client_test.py	(date 1600464883628)
@@ -1,24 +1,72 @@
 import unittest
-from client3 import getDataPoint
+
+from client3 import getDataPoint, getRatio
+
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Add the assertion below ------------ """
+        for quote in quotes:
+            bid_price = quote['top_ask']['price']
+            ask_price = quote['top_bid']['price']
+            self.assertEqual(getDataPoint(quote)[3], (bid_price + ask_price) / 2)
 
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Add the assertion below ------------ """
+        for quote in quotes:
+            bid_price = quote['top_ask']['price']
+            ask_price = quote['top_bid']['price']
+            self.assertEqual(getDataPoint(quote)[3], (bid_price + ask_price) / 2)
 
-  """ ------------ Add more unit tests ------------ """
+    """ ------------ Add more unit tests ------------ """
 
+    def test_getRatio_calculateRatio(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+
+        price_a = (quotes[0]['top_ask']['price'] + quotes[0]['top_bid']['price']) / 2
+        price_b = (quotes[1]['top_ask']['price'] + quotes[1]['top_bid']['price']) / 2
+        self.assertEqual(getRatio(price_a, price_b), price_a / price_b)
+
+    def test_getRatio_calculateRatio_priceAEqualsZero(self):
+        quotes = [
+            {'top_ask': {'price': 0, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 0, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+
+        price_a = (quotes[0]['top_ask']['price'] + quotes[0]['top_bid']['price']) / 2
+        price_b = (quotes[1]['top_ask']['price'] + quotes[1]['top_bid']['price']) / 2
+        self.assertEqual(getRatio(price_a, price_b), 0)
+
+    def test_getRatio_calculateRatio_priceBEqualsZero(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 0, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 0, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+
+        price_a = (quotes[0]['top_ask']['price'] + quotes[0]['top_bid']['price']) / 2
+        price_b = (quotes[1]['top_ask']['price'] + quotes[1]['top_bid']['price']) / 2
+        self.assertEqual(getRatio(price_a, price_b), None)
 
 
 if __name__ == '__main__':
