Index: src/Graph.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Graph.tsx	(date 1600536857776)
+++ src/Graph.tsx	(date 1600536857776)
@@ -23,10 +23,13 @@
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,25 @@
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
Index: src/DataManipulator.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DataManipulator.ts	(date 1600536857776)
+++ src/DataManipulator.ts	(date 1600536857776)
@@ -1,20 +1,33 @@
-import { ServerRespond } from './DataStreamer';
+import {ServerRespond} from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+    price_abc: number,
+    price_def: number,
+    ratio: number,
+    timestamp: Date,
+    upper_bound: number,
+    lower_bound: number,
+    trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
-  }
+    static generateRow(serverRespond: ServerRespond[]): Row {
+        const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+        const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+        const ratio = priceABC / priceDEF;
+        // +/- 10 percent of the average yearly ratio
+        const upperBound = 1 + 0.1;
+        const lowerBound = 1 - 0.01;
+        return {
+            price_abc: priceABC,
+            price_def: priceDEF,
+            ratio,
+            timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ? // returns the highest timestamp out of ABC & DEF
+                serverRespond[0].timestamp : serverRespond[1].timestamp,
+            upper_bound: upperBound,
+            lower_bound: lowerBound,
+            trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio: undefined, // returns undefined if the ratio is an outlier
+        };
+    }
 }
Index: datafeed/server3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- datafeed/server3.py	(date 1600536857771)
+++ datafeed/server3.py	(date 1600536857771)
@@ -143,7 +143,7 @@
 
 def generate_csv():
     """ Generate a CSV of order history. """
-    with open('test.csv', 'wb') as f:
+    with open('test.csv', 'w') as f:
         writer = csv.writer(f)
         for t, stock, side, order, size in orders(market()):
             if t > MARKET_OPEN + SIM_LENGTH:
